---
import type { HTMLAttributes } from 'astro/types';
import type { EitherOneOrAnother } from '@/lib/types';
import { Icon } from 'astro-icon/components';
import { twJoin, twMerge } from 'tailwind-merge';

type Props = {
  text: string;
  icon?: string;
  variant?: 'default' | 'accent' | 'ghost';
  size?: 'medium' | 'large';
  id?: string;
  class?: string;
} & EitherOneOrAnother<
  { href: string; external?: boolean },
  Pick<HTMLAttributes<'button'>, 'type' | 'disabled'>
>;

const {
  text,
  icon,
  variant = 'default',
  size = 'large',
  id,
  class: className,
  href,
  external = false,
  type = 'button',
  disabled = false,
} = Astro.props;

const ButtonTag = href ? 'a' : 'button';

const anchorProps = {
  href,
  target: external ? '_blank' : null,
  rel: external ? 'noopener noreferrer' : null,
};

const buttonProps = {
  type,
  disabled,
};
---

<ButtonTag
  {id}
  {...href ? anchorProps : buttonProps}
  data-button={variant === 'default'}
  class={twJoin(
    'relative inline-block rounded-lg p-px transition duration-300',
    'before:absolute before:inset-0 before:z-10 before:h-full before:w-full before:rounded-lg before:bg-[radial-gradient(circle_4rem_at_var(--mouse-x)_var(--mouse-y),_var(--tw-gradient-stops))] before:from-neutral/10 before:opacity-0 before:transition-opacity before:duration-300 before:hover:opacity-100',
    'after:absolute after:inset-0 after:-z-10 after:h-full after:w-full after:rounded-lg after:bg-[radial-gradient(circle_3rem_at_var(--mouse-x)_var(--mouse-y),_var(--tw-gradient-stops))] after:from-neutral/30',
    variant === 'accent'
      ? 'bg-accent text-primary shadow-accent hover:shadow-xl focus-visible:shadow-xl'
      : variant === 'ghost'
      ? 'bg-primary text-neutral/70 hover:text-neutral focus-visible:text-neutral'
      : 'bg-neutral/10 text-neutral/70 hover:text-neutral focus-visible:text-neutral',
    size === 'large' ? 'h-12 text-label-base-500' : 'h-8 text-label-sm-500',
    className
  )}
>
  <div
    class={twMerge(
      'flex h-full w-full items-center justify-center gap-3 rounded-lg bg-primary transition-[background-color] duration-300',
      variant === 'accent' ? 'bg-accent' : 'bg-primary',
      size === 'large' ? 'px-6' : 'px-4'
    )}
  >
    {
      icon && (
        <Icon
          name={icon}
          aria-hidden="true"
          focusable="false"
          class={size === 'large' ? 'h-5 w-5' : 'h-[1.125rem] w-[1.125rem]'}
        />
      )
    }
    {text}
  </div>
</ButtonTag>

<script>
  type Element = HTMLButtonElement | HTMLAnchorElement;

  const buttons = document.querySelectorAll<Element>('[data-button]');

  const GRADIENT_SIZE = 48;

  const handleMouseMove = ({ clientX, clientY }: MouseEvent) => {
    requestAnimationFrame(() =>
      buttons.forEach((button) => {
        const { left, top, width, height } = button.getBoundingClientRect();
        const [x, y] = [clientX - left, clientY - top];
        const isXInRange = x >= -GRADIENT_SIZE && x <= width + GRADIENT_SIZE;
        const isYInRange = y >= -GRADIENT_SIZE && y <= height + GRADIENT_SIZE;
        if (!isXInRange || !isYInRange) return;
        button.style.setProperty('--mouse-x', `${x}px`);
        button.style.setProperty('--mouse-y', `${y}px`);
      })
    );
  };

  document.addEventListener('mousemove', handleMouseMove);

  const handleBlur = () => {
    buttons.forEach((button) => {
      button.style.removeProperty('--mouse-x');
      button.style.removeProperty('--mouse-y');
    });
  };

  window.addEventListener('blur', handleBlur);
</script>
