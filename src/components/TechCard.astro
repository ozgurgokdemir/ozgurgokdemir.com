---
import { Icon } from 'astro-icon/components';

type Props = {
  title: string;
  icon: string;
  color: string;
};

const { title, icon, color } = Astro.props;
---

<div
  data-tech-card
  class="relative aspect-square rounded-xl bg-neutral/10 p-px transition-colors duration-300 before:absolute before:inset-0 before:z-10 before:h-full before:w-full before:rounded-xl before:bg-[radial-gradient(circle_12rem_at_var(--mouse-x)_var(--mouse-y),_var(--tw-gradient-stops))] before:from-neutral/10 before:opacity-0 before:transition-opacity before:duration-300 after:absolute after:inset-0 after:-z-10 after:h-full after:w-full after:rounded-xl after:bg-[radial-gradient(circle_8rem_at_var(--mouse-x)_var(--mouse-y),_var(--tw-gradient-stops))] after:from-neutral/30 before:hover:opacity-100 sm:aspect-auto sm:h-32"
>
  <div
    class="flex h-full w-full flex-col items-center justify-center gap-4 rounded-xl bg-primary transition-colors duration-300"
  >
    <Icon
      name={icon}
      aria-hidden="true"
      focusable="false"
      class="h-12 w-12 transition-colors duration-300"
      style={{ color }}
    />
    <h3
      class="hidden font-secondary text-label-sm-600 text-neutral transition-colors duration-300 sm:block md:text-label-base-600"
    >
      {title}
    </h3>
  </div>
</div>

<script>
  import {
    getMouseState,
    updateMousePosition,
    removeMousePosition,
  } from '@/lib/mouse-effect';

  const cards = document.querySelectorAll<HTMLDivElement>('[data-tech-card]');

  const GRADIENT_SIZE = 128;

  const handleMouseMove = (event: MouseEvent) => {
    requestAnimationFrame(() => {
      cards.forEach((card) => {
        const { isInRange, position } = getMouseState(
          card,
          event,
          GRADIENT_SIZE
        );

        if (isInRange) {
          updateMousePosition(card, position);
        } else {
          removeMousePosition(card);
        }
      });
    });
  };

  document.addEventListener('mousemove', handleMouseMove);
</script>
