---
import { getCollection } from 'astro:content';
import NavBar from '@/components/nav-bar.astro';
import NavLink from '@/components/nav-link.astro';

const navigationCollection = await getCollection('navigation').then(
  (collection) => collection.sort((a, b) => a.data.order - b.data.order),
);
---

<NavBar
  orientation="vertical"
  id="mobile-menu"
  class="group absolute right-2 top-[calc(var(--header-height)-0.5rem)] z-40 w-36 overflow-hidden rounded-xl border border-white/10 bg-black/60 py-3 backdrop-blur-lg transition-[visibility,transform,opacity] duration-300 aria-[hidden=true]:invisible aria-[hidden=true]:-translate-y-4 aria-[hidden=true]:opacity-0"
  aria-hidden="true"
>
  <ul class="flex flex-col">
    {
      navigationCollection.map(({ data }) => (
        <li>
          <NavLink
            href={data.pathname}
            class="flex h-12 items-center px-4"
            aria-label={data.text}
          >
            {data.text}
          </NavLink>
        </li>
      ))
    }
  </ul>
</NavBar>

<script>
  document.addEventListener('astro:page-load', () => {
    let isExpanded = false;

    const mobileMenu = document.getElementById(
      'mobile-menu',
    ) as HTMLDivElement | null;

    const hamburgerButton = document.querySelector<HTMLButtonElement>(
      '[aria-controls="mobile-menu"]',
    );

    if (!mobileMenu || !hamburgerButton) return;

    const handleClick = (event: MouseEvent) => {
      if (!isExpanded) return;

      const { clientX, clientY, target } = event;
      const { left, right, top, bottom } = mobileMenu.getBoundingClientRect();

      const isClickOutsideMenu =
        clientX < left || clientX > right || clientY < top || clientY > bottom;

      if (isClickOutsideMenu && !hamburgerButton.contains(target as Node)) {
        closeMenu();
      }
    };

    const openMenu = () => {
      mobileMenu.setAttribute('aria-hidden', 'false');
      hamburgerButton.setAttribute('aria-expanded', 'true');
      hamburgerButton.setAttribute('aria-label', 'close menu');
      isExpanded = true;
    };

    const closeMenu = () => {
      mobileMenu.setAttribute('aria-hidden', 'true');
      hamburgerButton.setAttribute('aria-expanded', 'false');
      hamburgerButton.setAttribute('aria-label', 'open menu');
      isExpanded = false;
    };

    const toggleMenu = () => {
      if (isExpanded) {
        closeMenu();
      } else {
        openMenu();
      }
    };

    closeMenu();

    hamburgerButton.addEventListener('click', toggleMenu);

    document.addEventListener('click', handleClick);
  });
</script>
