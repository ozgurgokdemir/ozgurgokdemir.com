---
import type { HTMLAttributes } from 'astro/types';
import { tv, type VariantProps } from 'tailwind-variants';

type NavBarVariants = VariantProps<typeof navBarStyles>;

type Props = HTMLAttributes<'nav'> & NavBarVariants;

const { orientation = 'vertical', class: className, ...props } = Astro.props;

const navBarStyles = tv({
  base: 'relative after:absolute',
  variants: {
    orientation: {
      vertical:
        'after:left-0 after:top-[calc(var(--indicator-top)+0.75rem)] after:h-6 after:w-0.5 after:rounded-r-full after:bg-emerald-400 after:transition-[top]',
      horizontal:
        'after:-bottom-2 after:left-[--indicator-left] after:h-0.5 after:w-[--indicator-width] after:rounded-full after:bg-emerald-400 after:transition-[width,left]',
    },
  },
  defaultVariants: {
    orientation: 'vertical',
  },
});
---

<nav
  class={navBarStyles({ orientation, className })}
  data-nav-bar
  data-orientation={orientation}
  {...props}
>
  <slot />
</nav>

<script>
  import navigation from '@/utils/navigation';

  function updateNavigation() {
    const navBars = document.querySelectorAll<HTMLDivElement>('[data-nav-bar]');

    const navigations = Array.from(navBars, (navBar) => ({
      navBar,
      navLinks: navBar.querySelectorAll<HTMLAnchorElement>('[data-nav-link]'),
    }));

    navigations.forEach(({ navBar, navLinks }) => {
      navLinks.forEach((navLink) => {
        const isCurrentPath = navigation.isCurrentPath(navLink.pathname);
        navLink.setAttribute('aria-current', isCurrentPath ? 'page' : 'false');

        if (!isCurrentPath) return;

        const activeLinkRect = navLink.getBoundingClientRect();
        const navBarRect = navBar.getBoundingClientRect();

        if (navBar.dataset.orientation === 'vertical') {
          navBar.style.setProperty(
            '--indicator-top',
            `${activeLinkRect.top - navBarRect.top}px`,
          );
        } else {
          navBar.style.setProperty(
            '--indicator-width',
            `${activeLinkRect.width / 2}px`,
          );
          navBar.style.setProperty(
            '--indicator-left',
            `${activeLinkRect.left - navBarRect.left + activeLinkRect.width / 4}px`,
          );
        }
      });
    });
  }

  updateNavigation();

  document.addEventListener('astro:after-swap', updateNavigation);
</script>
